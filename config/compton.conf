###########
# Backend #
###########

backend = "glx";
# Specify the backend to use: xrender, glx, or xr_glx_hybrid.  xrender is the
# default one.

#  ·  xrender backend performs all rendering operations with X Render extension.
#     It is what xcompmgr uses, and is generally a safe fallback when you
#     encounterrendering artifacts or instability.

#  ·  glx (OpenGL) backend performs all rendering operations with OpenGL. It is
#     more friendly to some VSync methods, and has significantly superior
#     performance on color inversion (--invert-color-include) or blur
#     (--blur-background). It requires proper OpenGL 2.0 support from your
#     driver and hardware. You may wish to look at the GLX performance
#     optimization options below.  --xrender-sync and --xrender-sync-fence might
#     be needed on some systems to avoid delay in changes of screen contents.

#  ·  xr_glx_hybrid backend renders the updated screen contents with X Render
#     and presents it on the screen with GLX. It attempts to address the
#     rendering issues some users encountered with GLX backend and enables the
#     better VSync of GLX backends.  --vsync-use-glfinish might fix some
#     rendering issues with this backend.


################
# GLX settings #
################

glx-no-stencil = true;
# GLX backend: Avoid using stencil buffer, useful if you don’t have a stencil
# buffer. Might cause incorrect opacity when rendering transparent content (but
# never practically happened) and may not work with --blur-background. Tests
# show a 15% performance boost. Recommended.

glx-copy-from-front = false;
# GLX backend: Copy unmodified regions from front buffer instead of redrawing
# them all. Tests with nvidia-drivers show a 10% decrease in performance when
# the whole screen is modified, but a 20% increase when only 1/4 is. Tests on
# nouveau show terrible slowdown. Useful with --glx-swap-method, as well.

glx-use-copysubbuffermesa = false;
# GLX backend: Use MESA_copy_sub_buffer to do partial screen update. Tests on
# nouveau show a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers. Overrides
# --glx-copy-from-front.

glx-no-rebind-pixmap = true;
# GLX backend: Avoid rebinding pixmap on window damage. Probably could improve
# performance on rapid window content changes, but is known to break things on
# some drivers (LLVMpipe). Recommended if it works.

glx-swap-method = "undefined";
# GLX backend: GLX buffer swap method we assume. Could be undefined (0),
# copy (1), exchange (2), 3-6, or buffer-age (-1). undefined is the slowest and
# the safest, and the default value. copy is fastest, but may fail on some
# drivers, 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3. buffer-age means
# auto-detect using GLX_EXT_buffer_age, supported by some drivers. Useless with
# --glx-use-copysubbuffermesa. Partially breaks --resize-damage. Defaults to
# undefined.


###############
# i3lock blur #
###############

blur-background = true;
# Blur background of semi-transparent / ARGB windows. Bad in performance, with
# driver-dependent behavior. The name of the switch may change without prior
# notifications.

blur-background-frame = true;
# Blur background of windows when the window frame is not opaque. Implies
# --blur-background. Bad in performance, with driver-dependent behavior. The
# name may change.

blur-background-fixed = false;
# Use fixed blur strength rather than adjusting according to window opacity.

blur-kern = "11,11,
0,1,2,3,4,5,4,3,2,1,0,
1,2,3,4,5,6,5,4,3,2,1,
2,3,4,5,6,7,6,5,4,3,2,
3,4,5,6,7,8,7,6,5,4,3,
4,5,6,7,8,9,8,7,6,5,4,
5,6,7,8,9,  9,8,7,6,5,
4,5,6,7,8,9,8,7,6,5,4,
3,4,5,6,7,8,7,6,5,4,3,
2,3,4,5,6,7,6,5,4,3,2,
1,2,3,4,5,6,5,4,3,2,1,
0,1,2,3,4,5,4,3,2,1,0"
# I am alwys interested in faster kernels. 9x9gaussian was somhow slower and
# also yielded almost no blur. While 7x7 box was faster I did not like the
# effect of the box kernel.

blur-background-exclude = [
  "name != 'i3lock'"
]
# Use the blur only on the background of i3lock


#########
# Other #
#########

inactive-opacity = 0.6;
# Opacity of inactive windows. (0.1 - 1.0, disabled by default)

inactive-dim = 0.5;
# Dim inactive windows. (0.0 - 1.0, defaults to 0.0)

vsync = "opengl-swc";
# Set VSync method.

paint-on-overlay = true;
# Painting on X Composite overlay window instead of on root window.

mark-wmwin-focused = true;
# Try to detect WM windows (a non-override-redirect window with no child that
# has WM_STATE) and mark them as active.

mark-ovredir-focused = true;
# Mark override-redirect windows that doesn’t have a child window with WM_STATE
# focused

use-ewmh-active-win = true;
# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of
# using FocusIn/Out events. Usually more reliable but depends on a
# EWMH-compliant WM.

detect-transient = true;
# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group
# focused at the same time.

detect-client-leader = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group
# focused at the same time.  WM_TRANSIENT_FOR has higher priority if
# --detect-transient is enabled, too.


################
# Static rules #
################

opacity-rule = [
  "75:name = 'i3lock'",
  # Show the blur background behing i3lock

  "90:class_g = 'URxvt' && focused",
  # Terminal with a bit transparency
  "90:class_g ~= '^(e|E)macs$' && focused"
  # Emacs with a bit transparency
]

focus-exclude = [
  "name ~= 'YouTube - Mozilla Firefox$'",
  # Treat Youtube as always in focus

  "class_g = 'mpv'"
  # Treat MPV as always in focus
]
